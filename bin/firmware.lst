
/Users/nrobinson/electron-project/bin/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000be8  08080018  08080018  00008018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08080c00  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000008  20000400  08080c04  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000194  20000408  20000408  00018408  2**2
                  ALLOC
  5 .module_info_suffix 00000028  08080c0c  08080c0c  00010c0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  08080c34  08080c34  00010c34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00033932  00000000  00000000  00010c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007336  00000000  00000000  0004456a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000043ac  00000000  00000000  0004b8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d60  00000000  00000000  0004fc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e00  00000000  00000000  000509ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a150  00000000  00000000  000517ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001049a  00000000  00000000  0006b8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00067161  00000000  00000000  0007bd96  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005bac  00000000  00000000  000e2ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	e0 0a 08 08                                         ....

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f000 fd3b 	bl	8080aa8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f000 fd40 	bl	8080abe <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08080c04 	.word	0x08080c04
 808004c:	20000408 	.word	0x20000408
 8080050:	20000408 	.word	0x20000408
 8080054:	2000059c 	.word	0x2000059c
 8080058:	2000059c 	.word	0x2000059c

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f000 fb7d 	bl	808075c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08080be0 	.word	0x08080be0
 8080084:	08080c00 	.word	0x08080c00

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b812 	b.w	80800b0 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f81f 	bl	80800d0 <loop>
    serialEventRun();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    serialEventRun();
 8080096:	f000 bb23 	b.w	80806e0 <serialEventRun>

0808009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 808009a:	f000 b921 	b.w	80802e0 <free>

0808009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 808009e:	7800      	ldrb	r0, [r0, #0]
 80800a0:	fab0 f080 	clz	r0, r0
 80800a4:	0940      	lsrs	r0, r0, #5
 80800a6:	4770      	bx	lr

080800a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800a8:	2301      	movs	r3, #1
 80800aa:	7003      	strb	r3, [r0, #0]
 80800ac:	4770      	bx	lr
	...

080800b0 <setup>:
#include "application.h"

int LDR = A0;

void setup()
{
 80800b0:	b508      	push	{r3, lr}
pinMode(LDR, INPUT);
 80800b2:	4b06      	ldr	r3, [pc, #24]	; (80800cc <setup+0x1c>)
 80800b4:	2100      	movs	r1, #0
 80800b6:	8818      	ldrh	r0, [r3, #0]
 80800b8:	f000 fb90 	bl	80807dc <pinMode>
Serial.begin(9600);
 80800bc:	f000 faf2 	bl	80806a4 <_Z20_fetch_global_serialv>
}
 80800c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
int LDR = A0;

void setup()
{
pinMode(LDR, INPUT);
Serial.begin(9600);
 80800c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80800c8:	f000 bae8 	b.w	808069c <_ZN9USBSerial5beginEl>
 80800cc:	20000400 	.word	0x20000400

080800d0 <loop>:
}

void loop()
{
 80800d0:	b510      	push	{r4, lr}
Serial.println(analogRead(LDR) / 4);
 80800d2:	f000 fae7 	bl	80806a4 <_Z20_fetch_global_serialv>
 80800d6:	4b09      	ldr	r3, [pc, #36]	; (80800fc <loop+0x2c>)
 80800d8:	4604      	mov	r4, r0
 80800da:	8818      	ldrh	r0, [r3, #0]
 80800dc:	f000 fb8f 	bl	80807fe <analogRead>
 80800e0:	2104      	movs	r1, #4
 80800e2:	fb90 f1f1 	sdiv	r1, r0, r1
 80800e6:	220a      	movs	r2, #10
 80800e8:	4620      	mov	r0, r4
 80800ea:	f000 fa0d 	bl	8080508 <_ZN5Print7printlnEli>
delay(1000);
}
 80800ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void loop()
{
Serial.println(analogRead(LDR) / 4);
delay(1000);
 80800f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80800f6:	f000 b8fb 	b.w	80802f0 <delay>
 80800fa:	bf00      	nop
 80800fc:	20000400 	.word	0x20000400

08080100 <_GLOBAL__sub_I_LDR>:
}
 8080100:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080102:	f000 f80d 	bl	8080120 <HAL_Pin_Map>
 8080106:	4b01      	ldr	r3, [pc, #4]	; (808010c <_GLOBAL__sub_I_LDR+0xc>)
 8080108:	6018      	str	r0, [r3, #0]
 808010a:	bd08      	pop	{r3, pc}
 808010c:	2000040c 	.word	0x2000040c

08080110 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(hal,HAL_RNG_Configuration)
DYNALIB_FN(hal,HAL_RNG_GetRandomNumber)
 8080110:	b508      	push	{r3, lr}
 8080112:	4b02      	ldr	r3, [pc, #8]	; (808011c <HAL_RNG_GetRandomNumber+0xc>)
 8080114:	681b      	ldr	r3, [r3, #0]
 8080116:	685b      	ldr	r3, [r3, #4]
 8080118:	9301      	str	r3, [sp, #4]
 808011a:	bd08      	pop	{r3, pc}
 808011c:	0804019c 	.word	0x0804019c

08080120 <HAL_Pin_Map>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)
DYNALIB_FN(hal_gpio,HAL_Pin_Map)
 8080120:	b508      	push	{r3, lr}
 8080122:	4b02      	ldr	r3, [pc, #8]	; (808012c <HAL_Pin_Map+0xc>)
 8080124:	681b      	ldr	r3, [r3, #0]
 8080126:	681b      	ldr	r3, [r3, #0]
 8080128:	9301      	str	r3, [sp, #4]
 808012a:	bd08      	pop	{r3, pc}
 808012c:	080401b0 	.word	0x080401b0

08080130 <HAL_Validate_Pin_Function>:
DYNALIB_FN(hal_gpio,HAL_Validate_Pin_Function)
 8080130:	b508      	push	{r3, lr}
 8080132:	4b02      	ldr	r3, [pc, #8]	; (808013c <HAL_Validate_Pin_Function+0xc>)
 8080134:	681b      	ldr	r3, [r3, #0]
 8080136:	685b      	ldr	r3, [r3, #4]
 8080138:	9301      	str	r3, [sp, #4]
 808013a:	bd08      	pop	{r3, pc}
 808013c:	080401b0 	.word	0x080401b0

08080140 <HAL_Pin_Mode>:
DYNALIB_FN(hal_gpio,HAL_Pin_Mode)
 8080140:	b508      	push	{r3, lr}
 8080142:	4b02      	ldr	r3, [pc, #8]	; (808014c <HAL_Pin_Mode+0xc>)
 8080144:	681b      	ldr	r3, [r3, #0]
 8080146:	689b      	ldr	r3, [r3, #8]
 8080148:	9301      	str	r3, [sp, #4]
 808014a:	bd08      	pop	{r3, pc}
 808014c:	080401b0 	.word	0x080401b0

08080150 <HAL_ADC_Read>:
DYNALIB_FN(hal_gpio,HAL_Interrupts_Enable_All)
DYNALIB_FN(hal_gpio,HAL_Interrupts_Disable_All)

DYNALIB_FN(hal_gpio,HAL_DAC_Write)
DYNALIB_FN(hal_gpio,HAL_ADC_Set_Sample_Time)
DYNALIB_FN(hal_gpio,HAL_ADC_Read)
 8080150:	b508      	push	{r3, lr}
 8080152:	4b02      	ldr	r3, [pc, #8]	; (808015c <HAL_ADC_Read+0xc>)
 8080154:	681b      	ldr	r3, [r3, #0]
 8080156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080158:	9301      	str	r3, [sp, #4]
 808015a:	bd08      	pop	{r3, pc}
 808015c:	080401b0 	.word	0x080401b0

08080160 <HAL_I2C_Write_Data>:
DYNALIB_FN(hal_i2c,HAL_I2C_Begin)
DYNALIB_FN(hal_i2c,HAL_I2C_End)
DYNALIB_FN(hal_i2c,HAL_I2C_Request_Data)
DYNALIB_FN(hal_i2c,HAL_I2C_Begin_Transmission)
DYNALIB_FN(hal_i2c,HAL_I2C_End_Transmission)
DYNALIB_FN(hal_i2c,HAL_I2C_Write_Data)
 8080160:	b508      	push	{r3, lr}
 8080162:	4b02      	ldr	r3, [pc, #8]	; (808016c <HAL_I2C_Write_Data+0xc>)
 8080164:	681b      	ldr	r3, [r3, #0]
 8080166:	6a1b      	ldr	r3, [r3, #32]
 8080168:	9301      	str	r3, [sp, #4]
 808016a:	bd08      	pop	{r3, pc}
 808016c:	080401ac 	.word	0x080401ac

08080170 <HAL_I2C_Available_Data>:
DYNALIB_FN(hal_i2c,HAL_I2C_Available_Data)
 8080170:	b508      	push	{r3, lr}
 8080172:	4b02      	ldr	r3, [pc, #8]	; (808017c <HAL_I2C_Available_Data+0xc>)
 8080174:	681b      	ldr	r3, [r3, #0]
 8080176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080178:	9301      	str	r3, [sp, #4]
 808017a:	bd08      	pop	{r3, pc}
 808017c:	080401ac 	.word	0x080401ac

08080180 <HAL_I2C_Read_Data>:
DYNALIB_FN(hal_i2c,HAL_I2C_Read_Data)
 8080180:	b508      	push	{r3, lr}
 8080182:	4b02      	ldr	r3, [pc, #8]	; (808018c <HAL_I2C_Read_Data+0xc>)
 8080184:	681b      	ldr	r3, [r3, #0]
 8080186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080188:	9301      	str	r3, [sp, #4]
 808018a:	bd08      	pop	{r3, pc}
 808018c:	080401ac 	.word	0x080401ac

08080190 <HAL_I2C_Peek_Data>:
DYNALIB_FN(hal_i2c,HAL_I2C_Peek_Data)
 8080190:	b508      	push	{r3, lr}
 8080192:	4b02      	ldr	r3, [pc, #8]	; (808019c <HAL_I2C_Peek_Data+0xc>)
 8080194:	681b      	ldr	r3, [r3, #0]
 8080196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080198:	9301      	str	r3, [sp, #4]
 808019a:	bd08      	pop	{r3, pc}
 808019c:	080401ac 	.word	0x080401ac

080801a0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(hal_i2c,HAL_I2C_Flush_Data)
 80801a0:	b508      	push	{r3, lr}
 80801a2:	4b02      	ldr	r3, [pc, #8]	; (80801ac <HAL_I2C_Flush_Data+0xc>)
 80801a4:	681b      	ldr	r3, [r3, #0]
 80801a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80801a8:	9301      	str	r3, [sp, #4]
 80801aa:	bd08      	pop	{r3, pc}
 80801ac:	080401ac 	.word	0x080401ac

080801b0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(hal_i2c,HAL_I2C_Is_Enabled)
 80801b0:	b508      	push	{r3, lr}
 80801b2:	4b02      	ldr	r3, [pc, #8]	; (80801bc <HAL_I2C_Is_Enabled+0xc>)
 80801b4:	681b      	ldr	r3, [r3, #0]
 80801b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80801b8:	9301      	str	r3, [sp, #4]
 80801ba:	bd08      	pop	{r3, pc}
 80801bc:	080401ac 	.word	0x080401ac

080801c0 <HAL_I2C_Init>:
DYNALIB_FN(hal_i2c,HAL_I2C_Set_Callback_On_Receive)
DYNALIB_FN(hal_i2c,HAL_I2C_Set_Callback_On_Request)
DYNALIB_FN(hal_i2c,HAL_I2C_Init)
 80801c0:	b508      	push	{r3, lr}
 80801c2:	4b02      	ldr	r3, [pc, #8]	; (80801cc <HAL_I2C_Init+0xc>)
 80801c4:	681b      	ldr	r3, [r3, #0]
 80801c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80801c8:	9301      	str	r3, [sp, #4]
 80801ca:	bd08      	pop	{r3, pc}
 80801cc:	080401ac 	.word	0x080401ac

080801d0 <HAL_SPI_Init>:
DYNALIB_FN(hal_spi,HAL_SPI_Set_Bit_Order)
DYNALIB_FN(hal_spi,HAL_SPI_Set_Data_Mode)
DYNALIB_FN(hal_spi,HAL_SPI_Set_Clock_Divider)
DYNALIB_FN(hal_spi,HAL_SPI_Send_Receive_Data)
DYNALIB_FN(hal_spi,HAL_SPI_Is_Enabled_Old)
DYNALIB_FN(hal_spi,HAL_SPI_Init)
 80801d0:	b508      	push	{r3, lr}
 80801d2:	4b02      	ldr	r3, [pc, #8]	; (80801dc <HAL_SPI_Init+0xc>)
 80801d4:	681b      	ldr	r3, [r3, #0]
 80801d6:	69db      	ldr	r3, [r3, #28]
 80801d8:	9301      	str	r3, [sp, #4]
 80801da:	bd08      	pop	{r3, pc}
 80801dc:	080401b4 	.word	0x080401b4

080801e0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(hal_spi,HAL_SPI_Is_Enabled)
 80801e0:	b508      	push	{r3, lr}
 80801e2:	4b02      	ldr	r3, [pc, #8]	; (80801ec <HAL_SPI_Is_Enabled+0xc>)
 80801e4:	681b      	ldr	r3, [r3, #0]
 80801e6:	6a1b      	ldr	r3, [r3, #32]
 80801e8:	9301      	str	r3, [sp, #4]
 80801ea:	bd08      	pop	{r3, pc}
 80801ec:	080401b4 	.word	0x080401b4

080801f0 <USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usart)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(hal_usart,USB_USART_Init)
 80801f0:	b508      	push	{r3, lr}
 80801f2:	4b02      	ldr	r3, [pc, #8]	; (80801fc <USB_USART_Init+0xc>)
 80801f4:	681b      	ldr	r3, [r3, #0]
 80801f6:	681b      	ldr	r3, [r3, #0]
 80801f8:	9301      	str	r3, [sp, #4]
 80801fa:	bd08      	pop	{r3, pc}
 80801fc:	080401c4 	.word	0x080401c4

08080200 <USB_USART_Available_Data>:
DYNALIB_FN(hal_usart,USB_USART_Available_Data)
 8080200:	b508      	push	{r3, lr}
 8080202:	4b02      	ldr	r3, [pc, #8]	; (808020c <USB_USART_Available_Data+0xc>)
 8080204:	681b      	ldr	r3, [r3, #0]
 8080206:	685b      	ldr	r3, [r3, #4]
 8080208:	9301      	str	r3, [sp, #4]
 808020a:	bd08      	pop	{r3, pc}
 808020c:	080401c4 	.word	0x080401c4

08080210 <USB_USART_Receive_Data>:
DYNALIB_FN(hal_usart,USB_USART_Receive_Data)
 8080210:	b508      	push	{r3, lr}
 8080212:	4b02      	ldr	r3, [pc, #8]	; (808021c <USB_USART_Receive_Data+0xc>)
 8080214:	681b      	ldr	r3, [r3, #0]
 8080216:	689b      	ldr	r3, [r3, #8]
 8080218:	9301      	str	r3, [sp, #4]
 808021a:	bd08      	pop	{r3, pc}
 808021c:	080401c4 	.word	0x080401c4

08080220 <USB_USART_Send_Data>:
DYNALIB_FN(hal_usart,USB_USART_Send_Data)
 8080220:	b508      	push	{r3, lr}
 8080222:	4b02      	ldr	r3, [pc, #8]	; (808022c <USB_USART_Send_Data+0xc>)
 8080224:	681b      	ldr	r3, [r3, #0]
 8080226:	68db      	ldr	r3, [r3, #12]
 8080228:	9301      	str	r3, [sp, #4]
 808022a:	bd08      	pop	{r3, pc}
 808022c:	080401c4 	.word	0x080401c4

08080230 <HAL_USART_Init>:
DYNALIB_FN(hal_usart,USB_USART_Baud_Rate)
DYNALIB_FN(hal_usart,USB_USART_LineCoding_BitRate_Handler)
#endif

DYNALIB_FN(hal_usart,HAL_USART_Init)
 8080230:	b508      	push	{r3, lr}
 8080232:	4b02      	ldr	r3, [pc, #8]	; (808023c <HAL_USART_Init+0xc>)
 8080234:	681b      	ldr	r3, [r3, #0]
 8080236:	699b      	ldr	r3, [r3, #24]
 8080238:	9301      	str	r3, [sp, #4]
 808023a:	bd08      	pop	{r3, pc}
 808023c:	080401c4 	.word	0x080401c4

08080240 <HAL_USART_Write_Data>:
DYNALIB_FN(hal_usart,HAL_USART_Begin)
DYNALIB_FN(hal_usart,HAL_USART_End)
DYNALIB_FN(hal_usart,HAL_USART_Write_Data)
 8080240:	b508      	push	{r3, lr}
 8080242:	4b02      	ldr	r3, [pc, #8]	; (808024c <HAL_USART_Write_Data+0xc>)
 8080244:	681b      	ldr	r3, [r3, #0]
 8080246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080248:	9301      	str	r3, [sp, #4]
 808024a:	bd08      	pop	{r3, pc}
 808024c:	080401c4 	.word	0x080401c4

08080250 <HAL_USART_Available_Data>:
DYNALIB_FN(hal_usart,HAL_USART_Available_Data)
 8080250:	b508      	push	{r3, lr}
 8080252:	4b02      	ldr	r3, [pc, #8]	; (808025c <HAL_USART_Available_Data+0xc>)
 8080254:	681b      	ldr	r3, [r3, #0]
 8080256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080258:	9301      	str	r3, [sp, #4]
 808025a:	bd08      	pop	{r3, pc}
 808025c:	080401c4 	.word	0x080401c4

08080260 <HAL_USART_Read_Data>:
DYNALIB_FN(hal_usart,HAL_USART_Read_Data)
 8080260:	b508      	push	{r3, lr}
 8080262:	4b02      	ldr	r3, [pc, #8]	; (808026c <HAL_USART_Read_Data+0xc>)
 8080264:	681b      	ldr	r3, [r3, #0]
 8080266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080268:	9301      	str	r3, [sp, #4]
 808026a:	bd08      	pop	{r3, pc}
 808026c:	080401c4 	.word	0x080401c4

08080270 <HAL_USART_Peek_Data>:
DYNALIB_FN(hal_usart,HAL_USART_Peek_Data)
 8080270:	b508      	push	{r3, lr}
 8080272:	4b02      	ldr	r3, [pc, #8]	; (808027c <HAL_USART_Peek_Data+0xc>)
 8080274:	681b      	ldr	r3, [r3, #0]
 8080276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080278:	9301      	str	r3, [sp, #4]
 808027a:	bd08      	pop	{r3, pc}
 808027c:	080401c4 	.word	0x080401c4

08080280 <HAL_USART_Flush_Data>:
DYNALIB_FN(hal_usart,HAL_USART_Flush_Data)
 8080280:	b508      	push	{r3, lr}
 8080282:	4b02      	ldr	r3, [pc, #8]	; (808028c <HAL_USART_Flush_Data+0xc>)
 8080284:	681b      	ldr	r3, [r3, #0]
 8080286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080288:	9301      	str	r3, [sp, #4]
 808028a:	bd08      	pop	{r3, pc}
 808028c:	080401c4 	.word	0x080401c4

08080290 <HAL_USART_Is_Enabled>:
DYNALIB_FN(hal_usart,HAL_USART_Is_Enabled)
 8080290:	b508      	push	{r3, lr}
 8080292:	4b02      	ldr	r3, [pc, #8]	; (808029c <HAL_USART_Is_Enabled+0xc>)
 8080294:	681b      	ldr	r3, [r3, #0]
 8080296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080298:	9301      	str	r3, [sp, #4]
 808029a:	bd08      	pop	{r3, pc}
 808029c:	080401c4 	.word	0x080401c4

080802a0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(hal_usart,HAL_USART_Half_Duplex)
DYNALIB_FN(hal_usart,HAL_USART_Available_Data_For_Write)
 80802a0:	b508      	push	{r3, lr}
 80802a2:	4b02      	ldr	r3, [pc, #8]	; (80802ac <HAL_USART_Available_Data_For_Write+0xc>)
 80802a4:	681b      	ldr	r3, [r3, #0]
 80802a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80802a8:	9301      	str	r3, [sp, #4]
 80802aa:	bd08      	pop	{r3, pc}
 80802ac:	080401c4 	.word	0x080401c4

080802b0 <set_system_mode>:
#include "system_version.h"
#endif

DYNALIB_BEGIN(system)
DYNALIB_FN(system, system_mode)
DYNALIB_FN(system, set_system_mode)
 80802b0:	b508      	push	{r3, lr}
 80802b2:	4b02      	ldr	r3, [pc, #8]	; (80802bc <set_system_mode+0xc>)
 80802b4:	681b      	ldr	r3, [r3, #0]
 80802b6:	685b      	ldr	r3, [r3, #4]
 80802b8:	9301      	str	r3, [sp, #4]
 80802ba:	bd08      	pop	{r3, pc}
 80802bc:	080401a4 	.word	0x080401a4

080802c0 <system_delay_ms>:

DYNALIB_FN(system, set_ymodem_serial_flash_update_handler)
DYNALIB_FN(system, system_firmwareUpdate)
DYNALIB_FN(system, system_fileTransfer)

DYNALIB_FN(system, system_delay_ms)
 80802c0:	b508      	push	{r3, lr}
 80802c2:	4b02      	ldr	r3, [pc, #8]	; (80802cc <system_delay_ms+0xc>)
 80802c4:	681b      	ldr	r3, [r3, #0]
 80802c6:	695b      	ldr	r3, [r3, #20]
 80802c8:	9301      	str	r3, [sp, #4]
 80802ca:	bd08      	pop	{r3, pc}
 80802cc:	080401a4 	.word	0x080401a4

080802d0 <network_ready>:
DYNALIB_BEGIN(system_net)
DYNALIB_FN(system_net, network_config)
DYNALIB_FN(system_net, network_connect)
DYNALIB_FN(system_net, network_connecting)
DYNALIB_FN(system_net, network_disconnect)
DYNALIB_FN(system_net, network_ready)
 80802d0:	b508      	push	{r3, lr}
 80802d2:	4b02      	ldr	r3, [pc, #8]	; (80802dc <network_ready+0xc>)
 80802d4:	681b      	ldr	r3, [r3, #0]
 80802d6:	691b      	ldr	r3, [r3, #16]
 80802d8:	9301      	str	r3, [sp, #4]
 80802da:	bd08      	pop	{r3, pc}
 80802dc:	080401c8 	.word	0x080401c8

080802e0 <free>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)
DYNALIB_FN(rt, malloc)
DYNALIB_FN(rt, free)
 80802e0:	b508      	push	{r3, lr}
 80802e2:	4b02      	ldr	r3, [pc, #8]	; (80802ec <free+0xc>)
 80802e4:	681b      	ldr	r3, [r3, #0]
 80802e6:	685b      	ldr	r3, [r3, #4]
 80802e8:	9301      	str	r3, [sp, #4]
 80802ea:	bd08      	pop	{r3, pc}
 80802ec:	080401a0 	.word	0x080401a0

080802f0 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80802f0:	2100      	movs	r1, #0
 80802f2:	f7ff bfe5 	b.w	80802c0 <system_delay_ms>

080802f6 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80802f6:	2000      	movs	r0, #0
 80802f8:	4601      	mov	r1, r0
 80802fa:	4602      	mov	r2, r0
 80802fc:	f7ff bfe8 	b.w	80802d0 <network_ready>

08080300 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return sig;
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 8080300:	b538      	push	{r3, r4, r5, lr}

#if Wiring_Cellular

namespace spark {

class CellularClass : public NetworkClass
 8080302:	4c06      	ldr	r4, [pc, #24]	; (808031c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x1c>)
 8080304:	4b06      	ldr	r3, [pc, #24]	; (8080320 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x20>)
 8080306:	4620      	mov	r0, r4
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8080308:	2528      	movs	r5, #40	; 0x28
 808030a:	f840 3b04 	str.w	r3, [r0], #4
 808030e:	2100      	movs	r1, #0
 8080310:	462a      	mov	r2, r5
 8080312:	f000 fbd4 	bl	8080abe <memset>
        size = sizeof(*this);
 8080316:	80a5      	strh	r5, [r4, #4]
 8080318:	bd38      	pop	{r3, r4, r5, pc}
 808031a:	bf00      	nop
 808031c:	20000410 	.word	0x20000410
 8080320:	08080b00 	.word	0x08080b00

08080324 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8080324:	4770      	bx	lr

08080326 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8080326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080328:	4606      	mov	r6, r0
 808032a:	4615      	mov	r5, r2
 808032c:	460c      	mov	r4, r1
 808032e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8080330:	42bc      	cmp	r4, r7
 8080332:	d006      	beq.n	8080342 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8080334:	6833      	ldr	r3, [r6, #0]
 8080336:	4630      	mov	r0, r6
 8080338:	689b      	ldr	r3, [r3, #8]
 808033a:	f814 1b01 	ldrb.w	r1, [r4], #1
 808033e:	4798      	blx	r3
 8080340:	e7f6      	b.n	8080330 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8080342:	4628      	mov	r0, r5
 8080344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080346 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8080346:	7c00      	ldrb	r0, [r0, #16]
 8080348:	2200      	movs	r2, #0
 808034a:	f7ff bf09 	b.w	8080160 <HAL_I2C_Write_Data>

0808034e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808034e:	7c00      	ldrb	r0, [r0, #16]
 8080350:	2100      	movs	r1, #0
 8080352:	f7ff bf0d 	b.w	8080170 <HAL_I2C_Available_Data>

08080356 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8080356:	7c00      	ldrb	r0, [r0, #16]
 8080358:	2100      	movs	r1, #0
 808035a:	f7ff bf11 	b.w	8080180 <HAL_I2C_Read_Data>

0808035e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808035e:	7c00      	ldrb	r0, [r0, #16]
 8080360:	2100      	movs	r1, #0
 8080362:	f7ff bf15 	b.w	8080190 <HAL_I2C_Peek_Data>

08080366 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8080366:	7c00      	ldrb	r0, [r0, #16]
 8080368:	2100      	movs	r1, #0
 808036a:	f7ff bf19 	b.w	80801a0 <HAL_I2C_Flush_Data>

0808036e <_ZN7TwoWireD0Ev>:
 808036e:	b510      	push	{r4, lr}
 8080370:	4604      	mov	r4, r0
 8080372:	f7ff fe92 	bl	808009a <_ZdlPv>
 8080376:	4620      	mov	r0, r4
 8080378:	bd10      	pop	{r4, pc}
	...

0808037c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808037c:	b510      	push	{r4, lr}
 808037e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080384:	6082      	str	r2, [r0, #8]
 8080386:	4a05      	ldr	r2, [pc, #20]	; (808039c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080388:	2300      	movs	r3, #0
 808038a:	6043      	str	r3, [r0, #4]
 808038c:	6002      	str	r2, [r0, #0]
{
  _i2c = i2c;
 808038e:	7401      	strb	r1, [r0, #16]
  HAL_I2C_Init(_i2c, NULL);
 8080390:	4608      	mov	r0, r1
 8080392:	4619      	mov	r1, r3
 8080394:	f7ff ff14 	bl	80801c0 <HAL_I2C_Init>

}
 8080398:	4620      	mov	r0, r4
 808039a:	bd10      	pop	{r4, pc}
 808039c:	08080b10 	.word	0x08080b10

080803a0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80803a0:	7c00      	ldrb	r0, [r0, #16]
 80803a2:	2100      	movs	r1, #0
 80803a4:	f7ff bf04 	b.w	80801b0 <HAL_I2C_Is_Enabled>

080803a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80803a8:	4770      	bx	lr

080803aa <_ZN9IPAddressD0Ev>:
 80803aa:	b510      	push	{r4, lr}
 80803ac:	4604      	mov	r4, r0
 80803ae:	f7ff fe74 	bl	808009a <_ZdlPv>
 80803b2:	4620      	mov	r0, r4
 80803b4:	bd10      	pop	{r4, pc}

080803b6 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80803b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80803b8:	460f      	mov	r7, r1
 80803ba:	f100 0608 	add.w	r6, r0, #8
 80803be:	1d05      	adds	r5, r0, #4
 80803c0:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80803c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80803c6:	4638      	mov	r0, r7
 80803c8:	220a      	movs	r2, #10
 80803ca:	f000 f8b4 	bl	8080536 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80803ce:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80803d0:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80803d2:	d007      	beq.n	80803e4 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80803d4:	2c00      	cmp	r4, #0
 80803d6:	d0f4      	beq.n	80803c2 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80803d8:	4638      	mov	r0, r7
 80803da:	212e      	movs	r1, #46	; 0x2e
 80803dc:	f000 f844 	bl	8080468 <_ZN5Print5printEc>
 80803e0:	4404      	add	r4, r0
 80803e2:	e7ee      	b.n	80803c2 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80803e4:	4620      	mov	r0, r4
 80803e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080803e8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80803e8:	b510      	push	{r4, lr}
 80803ea:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80803ee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80803f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80803f6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80803fa:	6041      	str	r1, [r0, #4]
 80803fc:	bd10      	pop	{r4, pc}
	...

08080400 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080402:	4604      	mov	r4, r0
 8080404:	4d04      	ldr	r5, [pc, #16]	; (8080418 <_ZN9IPAddressC1Ehhhh+0x18>)
 8080406:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080408:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808040c:	9500      	str	r5, [sp, #0]
 808040e:	f7ff ffeb 	bl	80803e8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080412:	4620      	mov	r0, r4
 8080414:	b003      	add	sp, #12
 8080416:	bd30      	pop	{r4, r5, pc}
 8080418:	08080b38 	.word	0x08080b38

0808041c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808041e:	4606      	mov	r6, r0
 8080420:	460d      	mov	r5, r1
 8080422:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8080424:	2400      	movs	r4, #0
  while (size--) {
 8080426:	42bd      	cmp	r5, r7
 8080428:	d00c      	beq.n	8080444 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808042a:	6833      	ldr	r3, [r6, #0]
 808042c:	4630      	mov	r0, r6
 808042e:	689b      	ldr	r3, [r3, #8]
 8080430:	f815 1b01 	ldrb.w	r1, [r5], #1
 8080434:	4798      	blx	r3
     if (chunk>=0)
 8080436:	2800      	cmp	r0, #0
 8080438:	db01      	blt.n	808043e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808043a:	4404      	add	r4, r0
 808043c:	e7f3      	b.n	8080426 <_ZN5Print5writeEPKhj+0xa>
/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     int chunk = write(*buffer++);
 808043e:	2c00      	cmp	r4, #0
 8080440:	bf08      	it	eq
 8080442:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8080444:	4620      	mov	r0, r4
 8080446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080448 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080448:	b570      	push	{r4, r5, r6, lr}
 808044a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808044c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808044e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8080450:	b149      	cbz	r1, 8080466 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080452:	f000 fb3c 	bl	8080ace <strlen>
 8080456:	682b      	ldr	r3, [r5, #0]
 8080458:	4602      	mov	r2, r0
 808045a:	4621      	mov	r1, r4
 808045c:	4628      	mov	r0, r5
    }
 808045e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8080462:	68db      	ldr	r3, [r3, #12]
 8080464:	4718      	bx	r3
    }
 8080466:	bd70      	pop	{r4, r5, r6, pc}

08080468 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8080468:	6803      	ldr	r3, [r0, #0]
 808046a:	689b      	ldr	r3, [r3, #8]
 808046c:	4718      	bx	r3

0808046e <_ZN5Print7printlnEv>:
 {
   return x.printTo(*this);
 }

size_t Print::println(void)
{
 808046e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080470:	210d      	movs	r1, #13
 {
   return x.printTo(*this);
 }

size_t Print::println(void)
{
 8080472:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080474:	f7ff fff8 	bl	8080468 <_ZN5Print5printEc>
  n += print('\n');
 8080478:	210a      	movs	r1, #10
   return x.printTo(*this);
 }

size_t Print::println(void)
{
  size_t n = print('\r');
 808047a:	4604      	mov	r4, r0
  n += print('\n');
 808047c:	4628      	mov	r0, r5
 808047e:	f7ff fff3 	bl	8080468 <_ZN5Print5printEc>
  return n;
}
 8080482:	4420      	add	r0, r4
 8080484:	bd38      	pop	{r3, r4, r5, pc}

08080486 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080486:	2a01      	cmp	r2, #1
 8080488:	bf98      	it	ls
 808048a:	220a      	movls	r2, #10
   return n;
 }

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 808048c:	b530      	push	{r4, r5, lr}
 808048e:	460b      	mov	r3, r1
 8080490:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080492:	2100      	movs	r1, #0
 8080494:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8080498:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 808049c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80804a0:	fb05 3312 	mls	r3, r5, r2, r3
 80804a4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80804a6:	2b09      	cmp	r3, #9
 80804a8:	bf94      	ite	ls
 80804aa:	3330      	addls	r3, #48	; 0x30
 80804ac:	3337      	addhi	r3, #55	; 0x37
 80804ae:	b2db      	uxtb	r3, r3
 80804b0:	4621      	mov	r1, r4
 80804b2:	f804 3901 	strb.w	r3, [r4], #-1
 80804b6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80804b8:	2d00      	cmp	r5, #0
 80804ba:	d1ef      	bne.n	808049c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80804bc:	f7ff ffc4 	bl	8080448 <_ZN5Print5writeEPKc>
}
 80804c0:	b00b      	add	sp, #44	; 0x2c
 80804c2:	bd30      	pop	{r4, r5, pc}

080804c4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80804c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80804c8:	4607      	mov	r7, r0
 80804ca:	460e      	mov	r6, r1
  if (base == 0) {
 80804cc:	4615      	mov	r5, r2
 80804ce:	b92a      	cbnz	r2, 80804dc <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80804d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80804d4:	6803      	ldr	r3, [r0, #0]
 80804d6:	b2c9      	uxtb	r1, r1
 80804d8:	689b      	ldr	r3, [r3, #8]
 80804da:	4718      	bx	r3
  } else if (base == 10) {
 80804dc:	2a0a      	cmp	r2, #10
 80804de:	d102      	bne.n	80804e6 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80804e0:	2900      	cmp	r1, #0
 80804e2:	da01      	bge.n	80804e8 <_ZN5Print5printEli+0x24>
 80804e4:	e004      	b.n	80804f0 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80804e6:	b2d2      	uxtb	r2, r2
  }
}
 80804e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80804ec:	f7ff bfcb 	b.w	8080486 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80804f0:	212d      	movs	r1, #45	; 0x2d
 80804f2:	f7ff ffb9 	bl	8080468 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80804f6:	4271      	negs	r1, r6
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80804f8:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80804fa:	462a      	mov	r2, r5
 80804fc:	4638      	mov	r0, r7
 80804fe:	f7ff ffc2 	bl	8080486 <_ZN5Print11printNumberEmh>
 8080502:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8080504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080508 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
 8080508:	b538      	push	{r3, r4, r5, lr}
 808050a:	4605      	mov	r5, r0
  size_t n = print(num, base);
 808050c:	f7ff ffda 	bl	80804c4 <_ZN5Print5printEli>
 8080510:	4604      	mov	r4, r0
  n += println();
 8080512:	4628      	mov	r0, r5
 8080514:	f7ff ffab 	bl	808046e <_ZN5Print7printlnEv>
  return n;
}
 8080518:	4420      	add	r0, r4
 808051a:	bd38      	pop	{r3, r4, r5, pc}

0808051c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 808051c:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
 808051e:	b92a      	cbnz	r2, 808052c <_ZN5Print5printEmi+0x10>
  else return printNumber(n, base);
}
 8080520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8080524:	6803      	ldr	r3, [r0, #0]
 8080526:	b2c9      	uxtb	r1, r1
 8080528:	689b      	ldr	r3, [r3, #8]
 808052a:	4718      	bx	r3
  else return printNumber(n, base);
 808052c:	b2d2      	uxtb	r2, r2
}
 808052e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8080532:	f7ff bfa8 	b.w	8080486 <_ZN5Print11printNumberEmh>

08080536 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8080536:	f7ff bff1 	b.w	808051c <_ZN5Print5printEmi>

0808053a <_ZN8SPIClassD1Ev>:
   */
  unsigned dividerReference;

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 808053a:	4770      	bx	lr

0808053c <_ZN8SPIClassD0Ev>:
 808053c:	b510      	push	{r4, lr}
 808053e:	4604      	mov	r4, r0
 8080540:	f7ff fdab 	bl	808009a <_ZdlPv>
 8080544:	4620      	mov	r0, r4
 8080546:	bd10      	pop	{r4, pc}

08080548 <_ZN8SPIClassC1E17HAL_SPI_Interface>:

#include "spark_wiring_spi.h"
#include "core_hal.h"
#include "spark_macros.h"

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8080548:	b510      	push	{r4, lr}
 808054a:	4604      	mov	r4, r0
 808054c:	4b04      	ldr	r3, [pc, #16]	; (8080560 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
{
  _spi = spi;
 808054e:	7101      	strb	r1, [r0, #4]

#include "spark_wiring_spi.h"
#include "core_hal.h"
#include "spark_macros.h"

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8080550:	6003      	str	r3, [r0, #0]
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8080552:	4608      	mov	r0, r1
 8080554:	f7ff fe3c 	bl	80801d0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8080558:	2300      	movs	r3, #0
 808055a:	60a3      	str	r3, [r4, #8]
}
 808055c:	4620      	mov	r0, r4
 808055e:	bd10      	pop	{r4, pc}
 8080560:	08080b50 	.word	0x08080b50

08080564 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8080564:	7900      	ldrb	r0, [r0, #4]
 8080566:	f7ff be3b 	b.w	80801e0 <HAL_SPI_Is_Enabled>

0808056a <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808056a:	2000      	movs	r0, #0
 808056c:	f7ff bea0 	b.w	80802b0 <set_system_mode>

08080570 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8080570:	4b02      	ldr	r3, [pc, #8]	; (808057c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8080572:	681a      	ldr	r2, [r3, #0]
 8080574:	4b02      	ldr	r3, [pc, #8]	; (8080580 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8080576:	601a      	str	r2, [r3, #0]
 8080578:	4770      	bx	lr
 808057a:	bf00      	nop
 808057c:	20000404 	.word	0x20000404
 8080580:	2000043c 	.word	0x2000043c

08080584 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080584:	4770      	bx	lr

08080586 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080586:	7441      	strb	r1, [r0, #17]
 8080588:	4770      	bx	lr

0808058a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data(_serial);
 808058a:	7c00      	ldrb	r0, [r0, #16]
 808058c:	f7ff be60 	b.w	8080250 <HAL_USART_Available_Data>

08080590 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8080590:	7c00      	ldrb	r0, [r0, #16]
 8080592:	f7ff be5d 	b.w	8080250 <HAL_USART_Available_Data>

08080596 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8080596:	7c00      	ldrb	r0, [r0, #16]
 8080598:	f7ff be6a 	b.w	8080270 <HAL_USART_Peek_Data>

0808059c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 808059c:	7c00      	ldrb	r0, [r0, #16]
 808059e:	f7ff be5f 	b.w	8080260 <HAL_USART_Read_Data>

080805a2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80805a2:	7c00      	ldrb	r0, [r0, #16]
 80805a4:	f7ff be6c 	b.w	8080280 <HAL_USART_Flush_Data>

080805a8 <_ZN11USARTSerialD0Ev>:
 80805a8:	b510      	push	{r4, lr}
 80805aa:	4604      	mov	r4, r0
 80805ac:	f7ff fd75 	bl	808009a <_ZdlPv>
 80805b0:	4620      	mov	r0, r4
 80805b2:	bd10      	pop	{r4, pc}

080805b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80805b4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80805b6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80805b8:	4604      	mov	r4, r0
 80805ba:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80805bc:	b925      	cbnz	r5, 80805c8 <_ZN11USARTSerial5writeEh+0x14>
 80805be:	7c00      	ldrb	r0, [r0, #16]
 80805c0:	f7ff fe6e 	bl	80802a0 <HAL_USART_Available_Data_For_Write>
 80805c4:	2800      	cmp	r0, #0
 80805c6:	dd05      	ble.n	80805d4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80805c8:	7c20      	ldrb	r0, [r4, #16]
 80805ca:	4631      	mov	r1, r6
  }
  return 0;
}
 80805cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80805d0:	f7ff be36 	b.w	8080240 <HAL_USART_Write_Data>
  }
  return 0;
}
 80805d4:	4628      	mov	r0, r5
 80805d6:	bd70      	pop	{r4, r5, r6, pc}

080805d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80805d8:	b510      	push	{r4, lr}
 80805da:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80805dc:	2000      	movs	r0, #0
 80805de:	6060      	str	r0, [r4, #4]
 80805e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80805e4:	60a0      	str	r0, [r4, #8]
 80805e6:	4806      	ldr	r0, [pc, #24]	; (8080600 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80805e8:	7421      	strb	r1, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80805ea:	6020      	str	r0, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80805ec:	2001      	movs	r0, #1
 80805ee:	7460      	strb	r0, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80805f0:	4608      	mov	r0, r1
 80805f2:	4611      	mov	r1, r2
 80805f4:	461a      	mov	r2, r3
 80805f6:	f7ff fe1b 	bl	8080230 <HAL_USART_Init>
}
 80805fa:	4620      	mov	r0, r4
 80805fc:	bd10      	pop	{r4, pc}
 80805fe:	bf00      	nop
 8080600:	08080b90 	.word	0x08080b90

08080604 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8080604:	7c00      	ldrb	r0, [r0, #16]
 8080606:	f7ff be43 	b.w	8080290 <HAL_USART_Is_Enabled>
	...

0808060c <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 808060c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808060e:	4d0c      	ldr	r5, [pc, #48]	; (8080640 <_Z22__fetch_global_Serial1v+0x34>)
 8080610:	6829      	ldr	r1, [r5, #0]
 8080612:	f011 0401 	ands.w	r4, r1, #1
 8080616:	d111      	bne.n	808063c <_Z22__fetch_global_Serial1v+0x30>
 8080618:	4628      	mov	r0, r5
 808061a:	f7ff fd40 	bl	808009e <__cxa_guard_acquire>
 808061e:	b168      	cbz	r0, 808063c <_Z22__fetch_global_Serial1v+0x30>
 8080620:	4621      	mov	r1, r4
 8080622:	4a08      	ldr	r2, [pc, #32]	; (8080644 <_Z22__fetch_global_Serial1v+0x38>)
 8080624:	4b08      	ldr	r3, [pc, #32]	; (8080648 <_Z22__fetch_global_Serial1v+0x3c>)
 8080626:	4809      	ldr	r0, [pc, #36]	; (808064c <_Z22__fetch_global_Serial1v+0x40>)
 8080628:	f7ff ffd6 	bl	80805d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808062c:	4628      	mov	r0, r5
 808062e:	f7ff fd3b 	bl	80800a8 <__cxa_guard_release>
 8080632:	4806      	ldr	r0, [pc, #24]	; (808064c <_Z22__fetch_global_Serial1v+0x40>)
 8080634:	4906      	ldr	r1, [pc, #24]	; (8080650 <_Z22__fetch_global_Serial1v+0x44>)
 8080636:	4a07      	ldr	r2, [pc, #28]	; (8080654 <_Z22__fetch_global_Serial1v+0x48>)
 8080638:	f000 f95e 	bl	80808f8 <__aeabi_atexit>
	return serial1;
}
 808063c:	4803      	ldr	r0, [pc, #12]	; (808064c <_Z22__fetch_global_Serial1v+0x40>)
 808063e:	bd38      	pop	{r3, r4, r5, pc}
 8080640:	20000498 	.word	0x20000498
 8080644:	2000049c 	.word	0x2000049c
 8080648:	20000454 	.word	0x20000454
 808064c:	20000440 	.word	0x20000440
 8080650:	08080585 	.word	0x08080585
 8080654:	20000408 	.word	0x20000408

08080658 <_ZN9USBSerial5flushEv>:
	USB_USART_Send_Data(byte);
	return 1;
}

void USBSerial::flush()
{
 8080658:	4770      	bx	lr

0808065a <_ZN9USBSerialD1Ev>:

#include "spark_wiring_stream.h"
#include "usb_hal.h"
#include "system_task.h"

class USBSerial : public Stream
 808065a:	4770      	bx	lr

0808065c <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return USB_USART_Receive_Data(false);
 808065c:	2000      	movs	r0, #0
 808065e:	f7ff bdd7 	b.w	8080210 <USB_USART_Receive_Data>

08080662 <_ZN9USBSerial4peekEv>:
{
}

int USBSerial::peek()
{
	return USB_USART_Receive_Data(true);
 8080662:	2001      	movs	r0, #1
 8080664:	f7ff bdd4 	b.w	8080210 <USB_USART_Receive_Data>

08080668 <_ZN9USBSerial9availableEv>:
{
	return USB_USART_Receive_Data(false);
}

int USBSerial::available()
{
 8080668:	b508      	push	{r3, lr}
	return USB_USART_Available_Data();
 808066a:	f7ff fdc9 	bl	8080200 <USB_USART_Available_Data>
}
 808066e:	bd08      	pop	{r3, pc}

08080670 <_ZN9USBSerial5writeEh>:

size_t USBSerial::write(uint8_t byte)
{
 8080670:	b508      	push	{r3, lr}
	USB_USART_Send_Data(byte);
 8080672:	4608      	mov	r0, r1
 8080674:	f7ff fdd4 	bl	8080220 <USB_USART_Send_Data>
	return 1;
}
 8080678:	2001      	movs	r0, #1
 808067a:	bd08      	pop	{r3, pc}

0808067c <_ZN9USBSerialD0Ev>:
 808067c:	b510      	push	{r4, lr}
 808067e:	4604      	mov	r4, r0
 8080680:	f7ff fd0b 	bl	808009a <_ZdlPv>
 8080684:	4620      	mov	r0, r4
 8080686:	bd10      	pop	{r4, pc}

08080688 <_ZN9USBSerialC1Ev>:
 8080688:	2200      	movs	r2, #0
 808068a:	6042      	str	r2, [r0, #4]
 808068c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080690:	6082      	str	r2, [r0, #8]
#include "spark_wiring_usbserial.h"

//
// Constructor
//
USBSerial::USBSerial()
 8080692:	4a01      	ldr	r2, [pc, #4]	; (8080698 <_ZN9USBSerialC1Ev+0x10>)
 8080694:	6002      	str	r2, [r0, #0]
{
}
 8080696:	4770      	bx	lr
 8080698:	08080bc0 	.word	0x08080bc0

0808069c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    USB_USART_Init((unsigned)speed);
 808069c:	4608      	mov	r0, r1
 808069e:	f7ff bda7 	b.w	80801f0 <USB_USART_Init>
	...

080806a4 <_Z20_fetch_global_serialv>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL
USBSerial& _fetch_global_serial()
{
 80806a4:	b510      	push	{r4, lr}
	static USBSerial _globalSerial;
 80806a6:	4c0a      	ldr	r4, [pc, #40]	; (80806d0 <_Z20_fetch_global_serialv+0x2c>)
 80806a8:	6823      	ldr	r3, [r4, #0]
 80806aa:	07db      	lsls	r3, r3, #31
 80806ac:	d40e      	bmi.n	80806cc <_Z20_fetch_global_serialv+0x28>
 80806ae:	4620      	mov	r0, r4
 80806b0:	f7ff fcf5 	bl	808009e <__cxa_guard_acquire>
 80806b4:	b150      	cbz	r0, 80806cc <_Z20_fetch_global_serialv+0x28>
 80806b6:	4807      	ldr	r0, [pc, #28]	; (80806d4 <_Z20_fetch_global_serialv+0x30>)
 80806b8:	f7ff ffe6 	bl	8080688 <_ZN9USBSerialC1Ev>
 80806bc:	4620      	mov	r0, r4
 80806be:	f7ff fcf3 	bl	80800a8 <__cxa_guard_release>
 80806c2:	4804      	ldr	r0, [pc, #16]	; (80806d4 <_Z20_fetch_global_serialv+0x30>)
 80806c4:	4904      	ldr	r1, [pc, #16]	; (80806d8 <_Z20_fetch_global_serialv+0x34>)
 80806c6:	4a05      	ldr	r2, [pc, #20]	; (80806dc <_Z20_fetch_global_serialv+0x38>)
 80806c8:	f000 f916 	bl	80808f8 <__aeabi_atexit>
	return _globalSerial;
}
 80806cc:	4801      	ldr	r0, [pc, #4]	; (80806d4 <_Z20_fetch_global_serialv+0x30>)
 80806ce:	bd10      	pop	{r4, pc}
 80806d0:	200004f0 	.word	0x200004f0
 80806d4:	200004e0 	.word	0x200004e0
 80806d8:	0808065b 	.word	0x0808065b
 80806dc:	20000408 	.word	0x20000408

080806e0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80806e0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80806e2:	4b13      	ldr	r3, [pc, #76]	; (8080730 <serialEventRun+0x50>)
 80806e4:	b133      	cbz	r3, 80806f4 <serialEventRun+0x14>
 80806e6:	f7ff ffdd 	bl	80806a4 <_Z20_fetch_global_serialv>
 80806ea:	6803      	ldr	r3, [r0, #0]
 80806ec:	691b      	ldr	r3, [r3, #16]
 80806ee:	4798      	blx	r3
 80806f0:	2800      	cmp	r0, #0
 80806f2:	dc15      	bgt.n	8080720 <serialEventRun+0x40>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80806f4:	4b0f      	ldr	r3, [pc, #60]	; (8080734 <serialEventRun+0x54>)
 80806f6:	b133      	cbz	r3, 8080706 <serialEventRun+0x26>
 80806f8:	f7ff ff88 	bl	808060c <_Z22__fetch_global_Serial1v>
 80806fc:	6803      	ldr	r3, [r0, #0]
 80806fe:	691b      	ldr	r3, [r3, #16]
 8080700:	4798      	blx	r3
 8080702:	2800      	cmp	r0, #0
 8080704:	dc0f      	bgt.n	8080726 <serialEventRun+0x46>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8080706:	4b0c      	ldr	r3, [pc, #48]	; (8080738 <serialEventRun+0x58>)
 8080708:	b10b      	cbz	r3, 808070e <serialEventRun+0x2e>
 808070a:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808070e:	4b0b      	ldr	r3, [pc, #44]	; (808073c <serialEventRun+0x5c>)
 8080710:	b10b      	cbz	r3, 8080716 <serialEventRun+0x36>
 8080712:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8080716:	4b0a      	ldr	r3, [pc, #40]	; (8080740 <serialEventRun+0x60>)
 8080718:	b143      	cbz	r3, 808072c <serialEventRun+0x4c>
 808071a:	f3af 8000 	nop.w
 808071e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8080720:	f3af 8000 	nop.w
 8080724:	e7e6      	b.n	80806f4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8080726:	f3af 8000 	nop.w
 808072a:	e7ec      	b.n	8080706 <serialEventRun+0x26>
 808072c:	bd08      	pop	{r3, pc}
 808072e:	bf00      	nop
	...

08080744 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080744:	4802      	ldr	r0, [pc, #8]	; (8080750 <_Z33system_initialize_user_backup_ramv+0xc>)
 8080746:	4a03      	ldr	r2, [pc, #12]	; (8080754 <_Z33system_initialize_user_backup_ramv+0x10>)
 8080748:	4903      	ldr	r1, [pc, #12]	; (8080758 <_Z33system_initialize_user_backup_ramv+0x14>)
 808074a:	1a12      	subs	r2, r2, r0
 808074c:	f000 b9ac 	b.w	8080aa8 <memcpy>
 8080750:	40024000 	.word	0x40024000
 8080754:	40024004 	.word	0x40024004
 8080758:	08080c00 	.word	0x08080c00

0808075c <module_user_init_hook>:

#endif


void module_user_init_hook()
{
 808075c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808075e:	4c09      	ldr	r4, [pc, #36]	; (8080784 <module_user_init_hook+0x28>)
 8080760:	4d09      	ldr	r5, [pc, #36]	; (8080788 <module_user_init_hook+0x2c>)
 8080762:	6823      	ldr	r3, [r4, #0]
 8080764:	1b5a      	subs	r2, r3, r5
 8080766:	4253      	negs	r3, r2
 8080768:	4153      	adcs	r3, r2
 808076a:	4a08      	ldr	r2, [pc, #32]	; (808078c <module_user_init_hook+0x30>)
 808076c:	7013      	strb	r3, [r2, #0]
    if (!backup_ram_was_valid_) {
 808076e:	b913      	cbnz	r3, 8080776 <module_user_init_hook+0x1a>
        system_initialize_user_backup_ram();
 8080770:	f7ff ffe8 	bl	8080744 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8080774:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 8080776:	4b06      	ldr	r3, [pc, #24]	; (8080790 <module_user_init_hook+0x34>)
 8080778:	b11b      	cbz	r3, 8080782 <module_user_init_hook+0x26>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 808077a:	f7ff fcc9 	bl	8080110 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 808077e:	f3af 8000 	nop.w
 8080782:	bd38      	pop	{r3, r4, r5, pc}
 8080784:	40024000 	.word	0x40024000
 8080788:	9a271c1e 	.word	0x9a271c1e
 808078c:	200004f4 	.word	0x200004f4
 8080790:	00000000 	.word	0x00000000

08080794 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8080794:	b510      	push	{r4, lr}
 8080796:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8080798:	480f      	ldr	r0, [pc, #60]	; (80807d8 <pinAvailable+0x44>)
 808079a:	f7ff fee3 	bl	8080564 <_ZN8SPIClass9isEnabledEv>
 808079e:	b128      	cbz	r0, 80807ac <pinAvailable+0x18>
 80807a0:	f1a4 030d 	sub.w	r3, r4, #13
 80807a4:	2b02      	cmp	r3, #2
 80807a6:	d801      	bhi.n	80807ac <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80807a8:	2000      	movs	r0, #0
 80807aa:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80807ac:	f000 f83e 	bl	808082c <_Z19__fetch_global_Wirev>
 80807b0:	f7ff fdf6 	bl	80803a0 <_ZN7TwoWire9isEnabledEv>
 80807b4:	b108      	cbz	r0, 80807ba <pinAvailable+0x26>
 80807b6:	2c01      	cmp	r4, #1
 80807b8:	d9f6      	bls.n	80807a8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80807ba:	f7ff ff27 	bl	808060c <_Z22__fetch_global_Serial1v>
 80807be:	f7ff ff21 	bl	8080604 <_ZN11USARTSerial9isEnabledEv>
 80807c2:	b118      	cbz	r0, 80807cc <pinAvailable+0x38>
 80807c4:	f1a4 0312 	sub.w	r3, r4, #18
 80807c8:	2b01      	cmp	r3, #1
 80807ca:	d9ed      	bls.n	80807a8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80807cc:	2c2e      	cmp	r4, #46	; 0x2e
 80807ce:	bf8c      	ite	hi
 80807d0:	2000      	movhi	r0, #0
 80807d2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80807d4:	bd10      	pop	{r4, pc}
 80807d6:	bf00      	nop
 80807d8:	20000518 	.word	0x20000518

080807dc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80807dc:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80807de:	b538      	push	{r3, r4, r5, lr}
 80807e0:	4605      	mov	r5, r0
 80807e2:	460c      	mov	r4, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80807e4:	d80a      	bhi.n	80807fc <pinMode+0x20>
 80807e6:	29ff      	cmp	r1, #255	; 0xff
 80807e8:	d008      	beq.n	80807fc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80807ea:	f7ff ffd3 	bl	8080794 <pinAvailable>
 80807ee:	b128      	cbz	r0, 80807fc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80807f0:	4628      	mov	r0, r5
 80807f2:	4621      	mov	r1, r4
}
 80807f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80807f8:	f7ff bca2 	b.w	8080140 <HAL_Pin_Mode>
 80807fc:	bd38      	pop	{r3, r4, r5, pc}

080807fe <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80807fe:	b510      	push	{r4, lr}
 8080800:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8080802:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8080804:	bf9c      	itt	ls
 8080806:	340a      	addls	r4, #10
 8080808:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808080a:	4620      	mov	r0, r4
 808080c:	f7ff ffc2 	bl	8080794 <pinAvailable>
 8080810:	b150      	cbz	r0, 8080828 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8080812:	4620      	mov	r0, r4
 8080814:	2103      	movs	r1, #3
 8080816:	f7ff fc8b 	bl	8080130 <HAL_Validate_Pin_Function>
 808081a:	2803      	cmp	r0, #3
 808081c:	d104      	bne.n	8080828 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808081e:	4620      	mov	r0, r4
}
 8080820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8080824:	f7ff bc94 	b.w	8080150 <HAL_ADC_Read>
}
 8080828:	2000      	movs	r0, #0
 808082a:	bd10      	pop	{r4, pc}

0808082c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 808082c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808082e:	4d0b      	ldr	r5, [pc, #44]	; (808085c <_Z19__fetch_global_Wirev+0x30>)
 8080830:	6829      	ldr	r1, [r5, #0]
 8080832:	f011 0401 	ands.w	r4, r1, #1
 8080836:	d10f      	bne.n	8080858 <_Z19__fetch_global_Wirev+0x2c>
 8080838:	4628      	mov	r0, r5
 808083a:	f7ff fc30 	bl	808009e <__cxa_guard_acquire>
 808083e:	b158      	cbz	r0, 8080858 <_Z19__fetch_global_Wirev+0x2c>
 8080840:	4621      	mov	r1, r4
 8080842:	4807      	ldr	r0, [pc, #28]	; (8080860 <_Z19__fetch_global_Wirev+0x34>)
 8080844:	f7ff fd9a 	bl	808037c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8080848:	4628      	mov	r0, r5
 808084a:	f7ff fc2d 	bl	80800a8 <__cxa_guard_release>
 808084e:	4804      	ldr	r0, [pc, #16]	; (8080860 <_Z19__fetch_global_Wirev+0x34>)
 8080850:	4904      	ldr	r1, [pc, #16]	; (8080864 <_Z19__fetch_global_Wirev+0x38>)
 8080852:	4a05      	ldr	r2, [pc, #20]	; (8080868 <_Z19__fetch_global_Wirev+0x3c>)
 8080854:	f000 f850 	bl	80808f8 <__aeabi_atexit>
	return wire;
}
 8080858:	4801      	ldr	r0, [pc, #4]	; (8080860 <_Z19__fetch_global_Wirev+0x34>)
 808085a:	bd38      	pop	{r3, r4, r5, pc}
 808085c:	200004f8 	.word	0x200004f8
 8080860:	200004fc 	.word	0x200004fc
 8080864:	08080325 	.word	0x08080325
 8080868:	20000408 	.word	0x20000408

0808086c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 808086c:	b513      	push	{r0, r1, r4, lr}
 808086e:	4c08      	ldr	r4, [pc, #32]	; (8080890 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8080870:	2100      	movs	r1, #0
 8080872:	9100      	str	r1, [sp, #0]
 8080874:	460a      	mov	r2, r1
 8080876:	460b      	mov	r3, r1
 8080878:	4620      	mov	r0, r4
 808087a:	f7ff fdc1 	bl	8080400 <_ZN9IPAddressC1Ehhhh>
 808087e:	4620      	mov	r0, r4
 8080880:	4904      	ldr	r1, [pc, #16]	; (8080894 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8080882:	4a05      	ldr	r2, [pc, #20]	; (8080898 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8080884:	b002      	add	sp, #8
 8080886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808088a:	f000 b835 	b.w	80808f8 <__aeabi_atexit>
 808088e:	bf00      	nop
 8080890:	20000510 	.word	0x20000510
 8080894:	080803a9 	.word	0x080803a9
 8080898:	20000408 	.word	0x20000408

0808089c <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808089c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808089e:	4e11      	ldr	r6, [pc, #68]	; (80808e4 <_GLOBAL__sub_I_SPI+0x48>)
 80808a0:	4d11      	ldr	r5, [pc, #68]	; (80808e8 <_GLOBAL__sub_I_SPI+0x4c>)
 80808a2:	4c12      	ldr	r4, [pc, #72]	; (80808ec <_GLOBAL__sub_I_SPI+0x50>)
 80808a4:	4630      	mov	r0, r6
 80808a6:	2100      	movs	r1, #0
 80808a8:	f7ff fe4e 	bl	8080548 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80808ac:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80808ae:	4e10      	ldr	r6, [pc, #64]	; (80808f0 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80808b0:	4622      	mov	r2, r4
 80808b2:	4629      	mov	r1, r5
 80808b4:	f000 f820 	bl	80808f8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80808b8:	4630      	mov	r0, r6
 80808ba:	2101      	movs	r1, #1
 80808bc:	f7ff fe44 	bl	8080548 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80808c0:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80808c2:	4e0c      	ldr	r6, [pc, #48]	; (80808f4 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80808c4:	4622      	mov	r2, r4
 80808c6:	4629      	mov	r1, r5
 80808c8:	f000 f816 	bl	80808f8 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80808cc:	4630      	mov	r0, r6
 80808ce:	2102      	movs	r1, #2
 80808d0:	f7ff fe3a 	bl	8080548 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80808d4:	4630      	mov	r0, r6
 80808d6:	4629      	mov	r1, r5
 80808d8:	4622      	mov	r2, r4
 80808da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80808de:	f000 b80b 	b.w	80808f8 <__aeabi_atexit>
 80808e2:	bf00      	nop
 80808e4:	20000518 	.word	0x20000518
 80808e8:	0808053b 	.word	0x0808053b
 80808ec:	20000408 	.word	0x20000408
 80808f0:	20000524 	.word	0x20000524
 80808f4:	20000530 	.word	0x20000530

080808f8 <__aeabi_atexit>:
 80808f8:	4603      	mov	r3, r0
 80808fa:	4608      	mov	r0, r1
 80808fc:	4619      	mov	r1, r3
 80808fe:	f000 b8c5 	b.w	8080a8c <__cxa_atexit>
	...

08080904 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE>:
 8080904:	4b24      	ldr	r3, [pc, #144]	; (8080998 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x94>)
 8080906:	681a      	ldr	r2, [r3, #0]
 8080908:	07d0      	lsls	r0, r2, #31
 808090a:	bf5c      	itt	pl
 808090c:	2201      	movpl	r2, #1
 808090e:	601a      	strpl	r2, [r3, #0]
 8080910:	4b22      	ldr	r3, [pc, #136]	; (808099c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x98>)
 8080912:	681a      	ldr	r2, [r3, #0]
 8080914:	07d1      	lsls	r1, r2, #31
 8080916:	bf5c      	itt	pl
 8080918:	2201      	movpl	r2, #1
 808091a:	601a      	strpl	r2, [r3, #0]
 808091c:	4b20      	ldr	r3, [pc, #128]	; (80809a0 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x9c>)
 808091e:	681a      	ldr	r2, [r3, #0]
 8080920:	07d2      	lsls	r2, r2, #31
 8080922:	bf5c      	itt	pl
 8080924:	2201      	movpl	r2, #1
 8080926:	601a      	strpl	r2, [r3, #0]
 8080928:	4b1e      	ldr	r3, [pc, #120]	; (80809a4 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa0>)
 808092a:	681a      	ldr	r2, [r3, #0]
 808092c:	07d0      	lsls	r0, r2, #31
 808092e:	bf5c      	itt	pl
 8080930:	2201      	movpl	r2, #1
 8080932:	601a      	strpl	r2, [r3, #0]
 8080934:	4b1c      	ldr	r3, [pc, #112]	; (80809a8 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa4>)
 8080936:	681a      	ldr	r2, [r3, #0]
 8080938:	07d1      	lsls	r1, r2, #31
 808093a:	bf5c      	itt	pl
 808093c:	2201      	movpl	r2, #1
 808093e:	601a      	strpl	r2, [r3, #0]
 8080940:	4b1a      	ldr	r3, [pc, #104]	; (80809ac <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa8>)
 8080942:	681a      	ldr	r2, [r3, #0]
 8080944:	07d2      	lsls	r2, r2, #31
 8080946:	bf5c      	itt	pl
 8080948:	2201      	movpl	r2, #1
 808094a:	601a      	strpl	r2, [r3, #0]
 808094c:	4b18      	ldr	r3, [pc, #96]	; (80809b0 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xac>)
 808094e:	681a      	ldr	r2, [r3, #0]
 8080950:	07d0      	lsls	r0, r2, #31
 8080952:	bf5c      	itt	pl
 8080954:	2201      	movpl	r2, #1
 8080956:	601a      	strpl	r2, [r3, #0]
 8080958:	4b16      	ldr	r3, [pc, #88]	; (80809b4 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb0>)
 808095a:	681a      	ldr	r2, [r3, #0]
 808095c:	07d1      	lsls	r1, r2, #31
 808095e:	bf5c      	itt	pl
 8080960:	2201      	movpl	r2, #1
 8080962:	601a      	strpl	r2, [r3, #0]
 8080964:	4b14      	ldr	r3, [pc, #80]	; (80809b8 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb4>)
 8080966:	681a      	ldr	r2, [r3, #0]
 8080968:	07d2      	lsls	r2, r2, #31
 808096a:	bf5c      	itt	pl
 808096c:	2201      	movpl	r2, #1
 808096e:	601a      	strpl	r2, [r3, #0]
 8080970:	4b12      	ldr	r3, [pc, #72]	; (80809bc <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb8>)
 8080972:	681a      	ldr	r2, [r3, #0]
 8080974:	07d0      	lsls	r0, r2, #31
 8080976:	bf5c      	itt	pl
 8080978:	2201      	movpl	r2, #1
 808097a:	601a      	strpl	r2, [r3, #0]
 808097c:	4b10      	ldr	r3, [pc, #64]	; (80809c0 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xbc>)
 808097e:	681a      	ldr	r2, [r3, #0]
 8080980:	07d1      	lsls	r1, r2, #31
 8080982:	bf5c      	itt	pl
 8080984:	2201      	movpl	r2, #1
 8080986:	601a      	strpl	r2, [r3, #0]
 8080988:	4b0e      	ldr	r3, [pc, #56]	; (80809c4 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xc0>)
 808098a:	681a      	ldr	r2, [r3, #0]
 808098c:	07d2      	lsls	r2, r2, #31
 808098e:	bf5c      	itt	pl
 8080990:	2201      	movpl	r2, #1
 8080992:	601a      	strpl	r2, [r3, #0]
 8080994:	4770      	bx	lr
 8080996:	bf00      	nop
 8080998:	20000568 	.word	0x20000568
 808099c:	20000564 	.word	0x20000564
 80809a0:	20000560 	.word	0x20000560
 80809a4:	2000055c 	.word	0x2000055c
 80809a8:	20000558 	.word	0x20000558
 80809ac:	20000554 	.word	0x20000554
 80809b0:	20000550 	.word	0x20000550
 80809b4:	2000054c 	.word	0x2000054c
 80809b8:	20000548 	.word	0x20000548
 80809bc:	20000544 	.word	0x20000544
 80809c0:	20000540 	.word	0x20000540
 80809c4:	2000053c 	.word	0x2000053c

080809c8 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE>:
 80809c8:	4b24      	ldr	r3, [pc, #144]	; (8080a5c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x94>)
 80809ca:	681a      	ldr	r2, [r3, #0]
 80809cc:	07d0      	lsls	r0, r2, #31
 80809ce:	bf5c      	itt	pl
 80809d0:	2201      	movpl	r2, #1
 80809d2:	601a      	strpl	r2, [r3, #0]
 80809d4:	4b22      	ldr	r3, [pc, #136]	; (8080a60 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x98>)
 80809d6:	681a      	ldr	r2, [r3, #0]
 80809d8:	07d1      	lsls	r1, r2, #31
 80809da:	bf5c      	itt	pl
 80809dc:	2201      	movpl	r2, #1
 80809de:	601a      	strpl	r2, [r3, #0]
 80809e0:	4b20      	ldr	r3, [pc, #128]	; (8080a64 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x9c>)
 80809e2:	681a      	ldr	r2, [r3, #0]
 80809e4:	07d2      	lsls	r2, r2, #31
 80809e6:	bf5c      	itt	pl
 80809e8:	2201      	movpl	r2, #1
 80809ea:	601a      	strpl	r2, [r3, #0]
 80809ec:	4b1e      	ldr	r3, [pc, #120]	; (8080a68 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa0>)
 80809ee:	681a      	ldr	r2, [r3, #0]
 80809f0:	07d0      	lsls	r0, r2, #31
 80809f2:	bf5c      	itt	pl
 80809f4:	2201      	movpl	r2, #1
 80809f6:	601a      	strpl	r2, [r3, #0]
 80809f8:	4b1c      	ldr	r3, [pc, #112]	; (8080a6c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa4>)
 80809fa:	681a      	ldr	r2, [r3, #0]
 80809fc:	07d1      	lsls	r1, r2, #31
 80809fe:	bf5c      	itt	pl
 8080a00:	2201      	movpl	r2, #1
 8080a02:	601a      	strpl	r2, [r3, #0]
 8080a04:	4b1a      	ldr	r3, [pc, #104]	; (8080a70 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa8>)
 8080a06:	681a      	ldr	r2, [r3, #0]
 8080a08:	07d2      	lsls	r2, r2, #31
 8080a0a:	bf5c      	itt	pl
 8080a0c:	2201      	movpl	r2, #1
 8080a0e:	601a      	strpl	r2, [r3, #0]
 8080a10:	4b18      	ldr	r3, [pc, #96]	; (8080a74 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xac>)
 8080a12:	681a      	ldr	r2, [r3, #0]
 8080a14:	07d0      	lsls	r0, r2, #31
 8080a16:	bf5c      	itt	pl
 8080a18:	2201      	movpl	r2, #1
 8080a1a:	601a      	strpl	r2, [r3, #0]
 8080a1c:	4b16      	ldr	r3, [pc, #88]	; (8080a78 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb0>)
 8080a1e:	681a      	ldr	r2, [r3, #0]
 8080a20:	07d1      	lsls	r1, r2, #31
 8080a22:	bf5c      	itt	pl
 8080a24:	2201      	movpl	r2, #1
 8080a26:	601a      	strpl	r2, [r3, #0]
 8080a28:	4b14      	ldr	r3, [pc, #80]	; (8080a7c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb4>)
 8080a2a:	681a      	ldr	r2, [r3, #0]
 8080a2c:	07d2      	lsls	r2, r2, #31
 8080a2e:	bf5c      	itt	pl
 8080a30:	2201      	movpl	r2, #1
 8080a32:	601a      	strpl	r2, [r3, #0]
 8080a34:	4b12      	ldr	r3, [pc, #72]	; (8080a80 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb8>)
 8080a36:	681a      	ldr	r2, [r3, #0]
 8080a38:	07d0      	lsls	r0, r2, #31
 8080a3a:	bf5c      	itt	pl
 8080a3c:	2201      	movpl	r2, #1
 8080a3e:	601a      	strpl	r2, [r3, #0]
 8080a40:	4b10      	ldr	r3, [pc, #64]	; (8080a84 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xbc>)
 8080a42:	681a      	ldr	r2, [r3, #0]
 8080a44:	07d1      	lsls	r1, r2, #31
 8080a46:	bf5c      	itt	pl
 8080a48:	2201      	movpl	r2, #1
 8080a4a:	601a      	strpl	r2, [r3, #0]
 8080a4c:	4b0e      	ldr	r3, [pc, #56]	; (8080a88 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xc0>)
 8080a4e:	681a      	ldr	r2, [r3, #0]
 8080a50:	07d2      	lsls	r2, r2, #31
 8080a52:	bf5c      	itt	pl
 8080a54:	2201      	movpl	r2, #1
 8080a56:	601a      	strpl	r2, [r3, #0]
 8080a58:	4770      	bx	lr
 8080a5a:	bf00      	nop
 8080a5c:	20000598 	.word	0x20000598
 8080a60:	20000594 	.word	0x20000594
 8080a64:	20000590 	.word	0x20000590
 8080a68:	2000058c 	.word	0x2000058c
 8080a6c:	20000588 	.word	0x20000588
 8080a70:	20000584 	.word	0x20000584
 8080a74:	20000580 	.word	0x20000580
 8080a78:	2000057c 	.word	0x2000057c
 8080a7c:	20000578 	.word	0x20000578
 8080a80:	20000574 	.word	0x20000574
 8080a84:	20000570 	.word	0x20000570
 8080a88:	2000056c 	.word	0x2000056c

08080a8c <__cxa_atexit>:
 8080a8c:	b538      	push	{r3, r4, r5, lr}
 8080a8e:	4605      	mov	r5, r0
 8080a90:	4804      	ldr	r0, [pc, #16]	; (8080aa4 <__cxa_atexit+0x18>)
 8080a92:	460c      	mov	r4, r1
 8080a94:	4613      	mov	r3, r2
 8080a96:	b120      	cbz	r0, 8080aa2 <__cxa_atexit+0x16>
 8080a98:	2002      	movs	r0, #2
 8080a9a:	4629      	mov	r1, r5
 8080a9c:	4622      	mov	r2, r4
 8080a9e:	f3af 8000 	nop.w
 8080aa2:	bd38      	pop	{r3, r4, r5, pc}
 8080aa4:	00000000 	.word	0x00000000

08080aa8 <memcpy>:
 8080aa8:	b510      	push	{r4, lr}
 8080aaa:	1e43      	subs	r3, r0, #1
 8080aac:	440a      	add	r2, r1
 8080aae:	4291      	cmp	r1, r2
 8080ab0:	d004      	beq.n	8080abc <memcpy+0x14>
 8080ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8080ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8080aba:	e7f8      	b.n	8080aae <memcpy+0x6>
 8080abc:	bd10      	pop	{r4, pc}

08080abe <memset>:
 8080abe:	4603      	mov	r3, r0
 8080ac0:	4402      	add	r2, r0
 8080ac2:	4293      	cmp	r3, r2
 8080ac4:	d002      	beq.n	8080acc <memset+0xe>
 8080ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8080aca:	e7fa      	b.n	8080ac2 <memset+0x4>
 8080acc:	4770      	bx	lr

08080ace <strlen>:
 8080ace:	4603      	mov	r3, r0
 8080ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8080ad4:	2a00      	cmp	r2, #0
 8080ad6:	d1fb      	bne.n	8080ad0 <strlen+0x2>
 8080ad8:	1a18      	subs	r0, r3, r0
 8080ada:	3801      	subs	r0, #1
 8080adc:	4770      	bx	lr

08080ade <link_code_end>:
	...

08080ae0 <dynalib_user>:
 8080ae0:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
	...

08080af8 <_ZTVN5spark13CellularClassE>:
	...
 8080b00:	02f7 0808 0000 0000                         ........

08080b08 <_ZTV7TwoWire>:
	...
 8080b10:	0325 0808 036f 0808 0347 0808 0327 0808     %...o...G...'...
 8080b20:	034f 0808 0357 0808 035f 0808 0367 0808     O...W..._...g...

08080b30 <_ZTV9IPAddress>:
	...
 8080b38:	03b7 0808 03a9 0808 03ab 0808 0000 0000     ................

08080b48 <_ZTV8SPIClass>:
	...
 8080b50:	053b 0808 053d 0808 005a 2b25 3330 3a64     ;...=...Z.%+03d:
 8080b60:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 8080b70:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
	...

08080b88 <_ZTV11USARTSerial>:
	...
 8080b90:	0585 0808 05a9 0808 05b5 0808 041d 0808     ................
 8080ba0:	0591 0808 059d 0808 0597 0808 05a3 0808     ................
 8080bb0:	0587 0808 058b 0808                         ........

08080bb8 <_ZTV9USBSerial>:
	...
 8080bc0:	065b 0808 067d 0808 0671 0808 041d 0808     [...}...q.......
 8080bd0:	0669 0808 065d 0808 0663 0808 0659 0808     i...]...c...Y...

08080be0 <link_const_variable_data_end>:
 8080be0:	08080101 	.word	0x08080101
 8080be4:	08080301 	.word	0x08080301
 8080be8:	0808056b 	.word	0x0808056b
 8080bec:	08080571 	.word	0x08080571
 8080bf0:	0808086d 	.word	0x0808086d
 8080bf4:	0808089d 	.word	0x0808089d
 8080bf8:	08080905 	.word	0x08080905
 8080bfc:	080809c9 	.word	0x080809c9
